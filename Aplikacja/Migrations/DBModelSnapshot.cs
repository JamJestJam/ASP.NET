// <auto-generated />
using System;
using Aplikacja.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aplikacja.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aplikacja.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ImageID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentID = 1,
                            CommentText = "moje pierwsze wyssłane zdj.",
                            ImageID = 1,
                            UserID = 1
                        },
                        new
                        {
                            CommentID = 2,
                            CommentText = "Coś ty stworzył",
                            ImageID = 1,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Aplikacja.Models.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageSRC")
                        .IsRequired()
                        .HasColumnType("varBinary(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.HasIndex("UserID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageID = 1,
                            ImageSRC = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserID = 1
                        },
                        new
                        {
                            ImageID = 2,
                            ImageSRC = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserID = 1
                        },
                        new
                        {
                            ImageID = 3,
                            ImageSRC = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Aplikacja.Models.Rate", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ImageID")
                        .HasColumnType("int");

                    b.Property<int>("UserRate")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ImageID");

                    b.HasIndex("ImageID");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            UserID = 2,
                            ImageID = 1,
                            UserRate = 5
                        },
                        new
                        {
                            UserID = 3,
                            ImageID = 1,
                            UserRate = 3
                        });
                });

            modelBuilder.Entity("Aplikacja.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            BirthDate = new DateTime(1998, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email@email.com",
                            Login = "marek",
                            Password = "zaq1@WSX"
                        },
                        new
                        {
                            UserID = 2,
                            BirthDate = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kotek@kotek.com",
                            Login = "Kotek",
                            Password = "zaq1@WSX"
                        },
                        new
                        {
                            UserID = 3,
                            BirthDate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jaszczur@zjadlkotka.com",
                            Login = "jaszczur",
                            Password = "zaq1@WSX"
                        });
                });

            modelBuilder.Entity("Aplikacja.Models.Comment", b =>
                {
                    b.HasOne("Aplikacja.Models.Image", "Image")
                        .WithMany("Comments")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplikacja.Models.User", "Autor")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Aplikacja.Models.Image", b =>
                {
                    b.HasOne("Aplikacja.Models.User", "Autor")
                        .WithMany("Images")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Aplikacja.Models.Rate", b =>
                {
                    b.HasOne("Aplikacja.Models.Image", "Image")
                        .WithMany("Rates")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplikacja.Models.User", "Autor")
                        .WithMany("Rates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Aplikacja.Models.Image", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Aplikacja.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
